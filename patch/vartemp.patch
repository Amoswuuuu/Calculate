diff --git a/include/calculate/lexer.hpp b/include/calculate/lexer.hpp
index ca97931..7389287 100644
--- a/include/calculate/lexer.hpp
+++ b/include/calculate/lexer.hpp
@@ -31,32 +31,42 @@ constexpr const char separator[] = ",";
 
 
 template<bool>
-constexpr const char* real =
-    R"(^[+\-]?\d+$)";
+struct real {
+    static constexpr const char* value =
+        R"(^[+\-]?\d+$)";
+};
 
 template<>
-constexpr const char* real<false> =
-    R"(^[+\-]?(?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?))$)";
+struct real<false> {
+    static constexpr const char* value =
+        R"(^[+\-]?(?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?))$)";
+};
 
 template<bool>
-constexpr const char* complex =
-    R"(^(?:(?:(?:[+\-]?\d+)(?:[+\-]?\d+)[ij])|(?:(?:[+\-]?\d+)[ij]?))$)";
+struct complex {
+    static constexpr const char* value =
+        R"(^(?:(?:(?:[+\-]?\d+)(?:[+\-]?\d+)[ij])|(?:(?:[+\-]?\d+)[ij]?))$)";
+};
 
 template<>
-constexpr const char* complex<false> =
-    R"(^(?:)"
-    R"((?:(?:[+\-]?(?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?))))"
-    R"((?:[+\-](?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?)))[ij])|)"
-    R"((?:(?:[+\-]?(?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?)))[ij]?))"
-    R"()$)";
+struct complex<false> {
+    static constexpr const char* value =
+        R"(^(?:)"
+        R"((?:(?:[+\-]?(?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?))))"
+        R"((?:[+\-](?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?)))[ij])|)"
+        R"((?:(?:[+\-]?(?:(?:NaN|Inf)|(?:(?:\d+\.?\d*|\.\d+)+(?:[eE][+\-]?\d+)?)))[ij]?))"
+        R"()$)";
+};
 
 template<typename Type>
-constexpr const char* number =
-    real<util::is_integral_v<Type>>;
+struct number {
+    static constexpr const char* value = real<std::is_integral<Type>::value>::value;
+};
 
 template<typename Type>
-constexpr const char* number<std::complex<Type>> =
-    complex<util::is_integral_v<Type>>;
+struct number<std::complex<Type>> {
+    static constexpr const char* value = complex<std::is_integral<Type>::value>::value;
+};
 
 
 constexpr const char name[] =
@@ -454,13 +464,13 @@ public:
 template<typename Type>
 Lexer<Type> make_lexer() noexcept {
     using namespace defaults;
-    return {left, right, separator, number<Type>, name, symbol};
+    return {left, right, separator, number<Type>::value, name, symbol};
 }
 
 template<typename Type>
 Lexer<Type> lexer_from_symbols(std::string lft, std::string rgt, std::string sep) {
     using namespace defaults;
-    return {std::move(lft), std::move(rgt), std::move(sep), number<Type>, name, symbol};
+    return {std::move(lft), std::move(rgt), std::move(sep), number<Type>::value, name, symbol};
 }
 
 template<typename Type>
diff --git a/include/calculate/node.hpp b/include/calculate/node.hpp
index 45ec997..6f1bab8 100644
--- a/include/calculate/node.hpp
+++ b/include/calculate/node.hpp
@@ -112,7 +112,7 @@ public:
         Type& at(const std::string& token) const { return _values[index(token)]; }
 
         template<typename Args>
-        std::enable_if_t<util::is_iterable_v<Args>> update(Args&& vals) {
+        std::enable_if_t<util::is_iterable<Args>::value> update(Args&& vals) {
             std::size_t i{};
 
             for (auto val = std::begin(vals); val != std::end(vals); ++val) {
diff --git a/include/calculate/symbol.hpp b/include/calculate/symbol.hpp
index 553763f..1301480 100644
--- a/include/calculate/symbol.hpp
+++ b/include/calculate/symbol.hpp
@@ -50,8 +50,8 @@ private:
 public:
     template<
         typename Callable,
-        typename = std::enable_if_t<util::not_same_v<Callable, Symbol>>,
-        typename = std::enable_if_t<!util::is_base_of_v<WrapperConcept, Callable>>
+        typename = std::enable_if_t<util::not_same<Callable, Symbol>::value>,
+        typename = std::enable_if_t<!std::is_base_of<WrapperConcept, Callable>::value>
     >
     Symbol(Callable&& callable) :
             Wrapper{
@@ -62,20 +62,20 @@ public:
             }
     {
         static_assert(
-            util::not_same_v<Callable, Function<Expression>> ||
-            util::argc_v<Callable> == 0,
+            util::not_same<Callable, Function<Expression>>::value ||
+            util::argc<Callable>::value == 0,
             "Functions must have at least one argument"
         );
         static_assert(
-            util::not_same_v<Callable, Operator<Expression>> ||
-            util::argc_v<Callable> == 2,
+            util::not_same<Callable, Operator<Expression>>::value ||
+            util::argc<Callable>::value == 2,
             "Operators must have two arguments"
         );
     }
 
     template<
         typename Callable,
-        typename = std::enable_if_t<util::is_base_of_v<WrapperConcept, Callable>>
+        typename = std::enable_if_t<std::is_base_of<WrapperConcept, Callable>::value>
     >
     Symbol(Callable&& callable) : Wrapper{std::forward<Callable>(callable)} {}
 
diff --git a/include/calculate/util.hpp b/include/calculate/util.hpp
index 4aa07c9..c643775 100644
--- a/include/calculate/util.hpp
+++ b/include/calculate/util.hpp
@@ -22,22 +22,6 @@ namespace calculate {
 
 namespace util {
 
-template<typename T, typename U>
-constexpr bool is_same_v = std::is_same<T, U>::value;
-
-template<typename T, typename U>
-constexpr bool is_base_of_v = std::is_base_of<T, U>::value;
-
-template<typename T>
-constexpr bool is_integral_v = std::is_integral<T>::value;
-
-template<typename T>
-constexpr bool is_copy_constructible_v = std::is_copy_constructible<T>::value;
-
-template<typename T>
-constexpr std::size_t tuple_size_v = std::tuple_size<T>::value;
-
-
 namespace detail {
 
 using std::begin;
@@ -68,7 +52,9 @@ struct make_tuple<T, argc, std::index_sequence<indices...>> {
 
 
 template<typename T, typename... Args>
-constexpr bool is_noexcept_v = noexcept(std::declval<T>()(std::declval<Args>()...));
+struct is_noexcept {
+    static constexpr bool value = noexcept(std::declval<T>()(std::declval<Args>()...));
+};
 
 template<bool c, typename R, typename... Args>
 struct TraitsHandler {
@@ -86,58 +72,60 @@ struct Traits<std::function<R(Args...)>> : TraitsHandler<true, R, Args...> {};
 template<typename R, typename... Args>
 struct Traits<
     R(*)(Args...) noexcept,
-    std::enable_if_t<is_noexcept_v<R(Args...) noexcept, Args...>>
+    std::enable_if_t<is_noexcept<R(Args...) noexcept, Args...>::value>
 > : TraitsHandler<true, R, Args...> {};
 
 template<typename R, typename... Args>
 struct Traits<
     R(*)(Args...),
-    std::enable_if_t<!is_noexcept_v<R(Args...), Args...>>
+    std::enable_if_t<!is_noexcept<R(Args...), Args...>::value>
 > : TraitsHandler<true, R, Args...> {};
 
 template<typename R, typename... Args>
 struct Traits<
     R(&)(Args...) noexcept,
-    std::enable_if_t<is_noexcept_v<R(Args...) noexcept, Args...>>
+    std::enable_if_t<is_noexcept<R(Args...) noexcept, Args...>::value>
 > : TraitsHandler<true, R, Args...> {};
 
 template<typename R, typename... Args>
 struct Traits<
     R(&)(Args...),
-    std::enable_if_t<!is_noexcept_v<R(Args...), Args...>>
+    std::enable_if_t<!is_noexcept<R(Args...), Args...>::value>
 > : TraitsHandler<true, R, Args...> {};
 
 template<typename T, typename R, typename... Args>
 struct Traits<
     R(T::*)(Args...) noexcept,
-    std::enable_if_t<is_noexcept_v<T, Args...>>
+    std::enable_if_t<is_noexcept<T, Args...>::value>
 > : TraitsHandler<false, R, Args...> {};
 
 template<typename T, typename R, typename... Args>
 struct Traits<
     R(T::*)(Args...),
-    std::enable_if_t<!is_noexcept_v<T, Args...>>
+    std::enable_if_t<!is_noexcept<T, Args...>::value>
 > : TraitsHandler<false, R, Args...> {};
 
 template<typename T, typename R, typename... Args>
 struct Traits<
     R(T::*)(Args...) const noexcept,
-    std::enable_if_t<is_noexcept_v<T, Args...>>
+    std::enable_if_t<is_noexcept<T, Args...>::value>
 > : TraitsHandler<true, R, Args...> {};
 
 template<typename T, typename R, typename... Args>
 struct Traits<
     R(T::*)(Args...) const,
-    std::enable_if_t<!is_noexcept_v<T, Args...>>
+    std::enable_if_t<!is_noexcept<T, Args...>::value>
 > : TraitsHandler<true, R, Args...> {};
 
 }
 
 template<typename T>
-constexpr bool is_iterable_v = detail::is_iterable<T>(0);
+struct is_iterable {
+    static constexpr bool value = detail::is_iterable<T>(0);
+};
 
 template<typename T>
-constexpr bool is_noexcept_v = detail::is_noexcept_v<T>;
+using is_noexcept = detail::is_noexcept<T>;
 
 
 template<typename T, std::size_t argc>
@@ -147,26 +135,32 @@ template<typename T>
 using result_t = typename detail::Traits<T>::result_t;
 
 template<typename T>
-constexpr bool is_const_v = detail::Traits<T>::is_const_v;
+struct is_const {
+    static constexpr bool value = detail::Traits<T>::is_const_v;
+};
 
 template<typename T>
 using args_tuple_t = typename detail::Traits<T>::args_tuple_t;
 
 template<typename T>
-constexpr std::size_t argc_v =
-    tuple_size_v<typename detail::Traits<T>::args_tuple_t>;
+struct argc {
+    static constexpr std::size_t value =
+        std::tuple_size<typename detail::Traits<T>::args_tuple_t>::value;
+};
 
 template<typename T, typename U>
-constexpr bool not_same_v =
-    !is_same_v<std::decay_t<T>, U> &&
-    !is_base_of_v<U, std::decay_t<T>>;
+struct not_same {
+    static constexpr bool value =
+        !std::is_same<std::decay_t<T>, U>::value &&
+        !std::is_base_of<U, std::decay_t<T>>::value;
+};
 
 
 template<typename T, typename... Args>
 std::vector<T> to_vector(Args&&... args) { return {std::forward<Args>(args)...}; }
 
 template<typename T, typename Args>
-std::enable_if_t<is_iterable_v<Args>, std::vector<T>>
+std::enable_if_t<is_iterable<Args>::value, std::vector<T>>
 to_vector(Args&& args) { return {std::begin(args), std::end(args)}; }
 
 
diff --git a/include/calculate/wrapper.hpp b/include/calculate/wrapper.hpp
index bb361f4..9cead46 100644
--- a/include/calculate/wrapper.hpp
+++ b/include/calculate/wrapper.hpp
@@ -83,7 +83,7 @@ class Wrapper {
     using ModelType = WrapperModel<
         std::decay_t<Callable>,
         std::decay_t<Adapter>,
-        util::argc_v<Callable>
+        util::argc<Callable>::value
     >;
 
     std::shared_ptr<WrapperConcept> _wrapper;
@@ -104,44 +104,44 @@ public:
             }
     {
         static_assert(
-            util::is_copy_constructible_v<Callable>,
+            std::is_copy_constructible<Callable>::value,
             "Non copy-constructible callable"
         );
         static_assert(
-            util::is_same_v<
+            std::is_same<
                 util::args_tuple_t<Callable>,
-                util::make_tuple_t<Type, util::argc_v<Callable>>
-            >,
+                util::make_tuple_t<Type, util::argc<Callable>::value>
+            >::value,
             "Wrong callable arguments types"
         );
         static_assert(
-            util::is_same_v<util::result_t<Callable>, Type>,
+            std::is_same<util::result_t<Callable>, Type>::value,
             "Wrong callable return type"
         );
-        static_assert(util::is_const_v<Callable>, "Non constant callable");
+        static_assert(util::is_const<Callable>::value, "Non constant callable");
 
         static_assert(
-            util::is_copy_constructible_v<Adapter>,
+            std::is_copy_constructible<Adapter>::value,
             "Non copy-constructible adapter"
         );
         static_assert(
-            util::is_same_v<
+            std::is_same<
                 util::args_tuple_t<Adapter>,
                 util::make_tuple_t<Source, 1>
-            >,
+            >::value,
             "Wrong adapter arguments types"
         );
         static_assert(
-            util::is_same_v<util::result_t<Adapter>, Type>,
+            std::is_same<util::result_t<Adapter>, Type>::value,
             "Wrong adapter return type"
         );
-        static_assert(util::is_const_v<Adapter>, "Non constant adapter");
+        static_assert(util::is_const<Adapter>::value, "Non constant adapter");
     }
 
     template<
         typename Callable,
-        typename = std::enable_if_t<util::not_same_v<Callable, Wrapper>>,
-        typename = std::enable_if_t<!util::is_base_of_v<WrapperConcept, Callable>>
+        typename = std::enable_if_t<util::not_same<Callable, Wrapper>::value>,
+        typename = std::enable_if_t<!std::is_base_of<WrapperConcept, Callable>::value>
     >
     Wrapper(Callable&& callable=[]() noexcept { return Type(); }) :
             Wrapper{
@@ -152,7 +152,7 @@ public:
 
     template<
         typename Callable,
-        typename = std::enable_if_t<util::is_base_of_v<WrapperConcept, Callable>>
+        typename = std::enable_if_t<std::is_base_of<WrapperConcept, Callable>::value>
     >
     Wrapper(Callable&& callable) :
             _wrapper{std::make_shared<Callable>(std::forward<Callable>(callable))}
