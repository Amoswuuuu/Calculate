cmake_minimum_required(VERSION 3.5)
project(Calculate)

enable_testing()
set(CMAKE_CONFIGURATION_TYPES "Release;Debug")
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

include_directories(include)
include_directories(tool/Catch2/single_include)

if(CMAKE_GENERATOR MATCHES "^Visual Studio.*$")
    set(msvc_toolchain TRUE)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Release/bin")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Debug/bin")
else()
    set(msvc_toolchain FALSE)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
endif()

if(WIN32 AND NOT MINGW AND NOT MSYS AND NOT CYGWIN)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} /Ox")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} /Od /Debug:full")
    set(CMAKE_CXX_FLAGS "")
else()
    if(
        (CMAKE_CXX_COMPILER_ID MATCHES GNU) OR
        (CMAKE_CXX_COMPILER_ID MATCHES Clang)
    )
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic -Wall -Werror")
    endif()
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O3")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -O0")
    set(CMAKE_CXX_FLAGS "")
endif()

if(BOOST_ROOT)
    if(MSVC)
        add_definitions(-DBOOST_ALL_NO_LIB)
        add_definitions(-DBOOST_ALL_DYN_LINK)
        set(Boost_USE_STATIC_LIBS OFF)
        set(Boost_USE_MULTITHREADED ON)
        set(Boost_USE_STATIC_RUNTIME OFF)
    endif()
    find_package(Boost COMPONENTS system filesystem program_options)
    if(Boost_FOUND)
        include_directories(${Boost_INCLUDE_DIRS})
        string(REPLACE ";" "\n       " boost_libraries "${Boost_LIBRARIES}")
        add_executable(calculate ${CMAKE_SOURCE_DIR}/example/calculate.cpp)
        target_link_libraries(calculate ${Boost_LIBRARIES})
    endif()
endif()

file(GLOB test_sources "${CMAKE_SOURCE_DIR}/test/*.cpp")
add_executable(unittests "${test_sources}")
if(msvc_toolchain)
    set(test_folder "${CMAKE_BINARY_DIR}/$<CONFIGURATION>/test")
else()
    set(test_folder "${CMAKE_BINARY_DIR}/test")
endif()
set_target_properties(unittests PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY_RELEASE "${test_folder}"
    RUNTIME_OUTPUT_DIRECTORY_DEBUG "${test_folder}"
)
add_test(NAME test COMMAND "${test_folder}/unittests")
